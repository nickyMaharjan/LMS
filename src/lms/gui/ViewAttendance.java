/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lms.gui;

import java.awt.Component;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import lms.connection.ProvideConnection;

/**
 *
 * @author DELL
 */
public class ViewAttendance extends javax.swing.JFrame {

    /**
     * Creates new form ViewAttedance
     */
    public int tutor_id;
    private int present_count;
    private int absent_count;
    private int student_count;
    private String user_role = "Admin";

    public ViewAttendance() {
        initComponents();
        setLocation(560, 60);
        totalstudentTxt.setText("" + student_count);
        presentstudentTxt.setText("" + present_count);
        absentstudentTxt.setText("" + absent_count);

    }

    public ViewAttendance(int tutor_id) {
        initComponents();
        this.tutor_id = tutor_id;
        user_role = "Tutor";
        setLocation(560, 60);
        totalstudentTxt.setText("" + student_count);
        presentstudentTxt.setText("" + present_count);
        absentstudentTxt.setText("" + absent_count);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        dateChooser = new com.toedter.calendar.JDateChooser();
        courseCombo = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        coursenameTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentattendanceTbl = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        totalstudentTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        presentstudentTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        absentstudentTxt = new javax.swing.JTextField();
        viewBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 24)); // NOI18N
        jLabel1.setText("View Attendance");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 13, -1, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 52, 1200, 10));

        dateChooser.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        getContentPane().add(dateChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(268, 69, 300, 35));

        courseCombo.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        courseCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        courseCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                courseComboItemStateChanged(evt);
            }
        });
        getContentPane().add(courseCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(606, 72, 300, 35));

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 20)); // NOI18N
        jLabel3.setText("Course Name:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(353, 136, -1, -1));

        coursenameTxt.setFont(new java.awt.Font("Segoe UI Semibold", 0, 20)); // NOI18N
        coursenameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coursenameTxtActionPerformed(evt);
            }
        });
        getContentPane().add(coursenameTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(499, 132, 200, 35));

        studentattendanceTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Student Name", "Status"
            }
        ));
        studentattendanceTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                studentattendanceTblMouseClicked(evt);
            }
        });
        studentattendanceTbl.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                studentattendanceTblPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(studentattendanceTbl);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 185, 1176, 550));

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 0, 20)); // NOI18N
        jLabel5.setText("Total Students");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 765, -1, -1));

        totalstudentTxt.setFont(new java.awt.Font("Segoe UI Semibold", 0, 20)); // NOI18N
        totalstudentTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalstudentTxtActionPerformed(evt);
            }
        });
        getContentPane().add(totalstudentTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 761, 150, 35));

        jLabel6.setFont(new java.awt.Font("Segoe UI Semibold", 0, 20)); // NOI18N
        jLabel6.setText("Present Students");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(399, 765, -1, -1));

        presentstudentTxt.setFont(new java.awt.Font("Segoe UI Semibold", 0, 20)); // NOI18N
        presentstudentTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presentstudentTxtActionPerformed(evt);
            }
        });
        getContentPane().add(presentstudentTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(625, 761, 150, 35));

        jLabel4.setFont(new java.awt.Font("Segoe UI Semibold", 0, 20)); // NOI18N
        jLabel4.setText("Absent Students");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(861, 765, -1, -1));

        absentstudentTxt.setFont(new java.awt.Font("Segoe UI Semibold", 0, 20)); // NOI18N
        absentstudentTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                absentstudentTxtActionPerformed(evt);
            }
        });
        getContentPane().add(absentstudentTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 761, 150, 35));

        viewBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        viewBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/images/file.png"))); // NOI18N
        viewBtn.setText("View");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });
        getContentPane().add(viewBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(933, 69, -1, 40));

        updateBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        updateBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/images/updating.png"))); // NOI18N
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        getContentPane().add(updateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 814, -1, 45));

        cancelBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/images/cancel.png"))); // NOI18N
        cancelBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelBtnMouseClicked(evt);
            }
        });
        getContentPane().add(cancelBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1156, 13, -1, -1));

        jPanel1.setBackground(new java.awt.Color(249, 244, 241));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1200, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 900));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void courseComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_courseComboItemStateChanged
        // TODO add your handling code here:
        String selectedCourse = (String) courseCombo.getSelectedItem();
        coursenameTxt.setText(selectedCourse);
        if (selectedCourse != null) {
        }
    }//GEN-LAST:event_courseComboItemStateChanged

    private void coursenameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coursenameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coursenameTxtActionPerformed

    private void studentattendanceTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentattendanceTblMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_studentattendanceTblMouseClicked

    private void studentattendanceTblPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_studentattendanceTblPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_studentattendanceTblPropertyChange

    private void totalstudentTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalstudentTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalstudentTxtActionPerformed

    private void presentstudentTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presentstudentTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_presentstudentTxtActionPerformed

    private void absentstudentTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_absentstudentTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_absentstudentTxtActionPerformed
    public List<String> getCourseNamesByTutorId(int tutorId) {
        List<String> courseNames = new ArrayList<>();
        Connection con = null;
        PreparedStatement stmt = null;
        ResultSet rs = null;

        try {
            con = ProvideConnection.getConnection();

            if (user_role.equals("Tutor")) {
                // Get course IDs for the given tutor
                String courseIdQuery = "SELECT course_id FROM assign_tutor WHERE tutor_id = ?";
                String courseNameQuery = "SELECT course_name FROM course WHERE course_id = ?";

                List<Integer> courseIds = new ArrayList<>();
                try (PreparedStatement courseIdStmt = con.prepareStatement(courseIdQuery)) {
                    courseIdStmt.setInt(1, tutorId);
                    try (ResultSet courseIdRs = courseIdStmt.executeQuery()) {
                        while (courseIdRs.next()) {
                            courseIds.add(courseIdRs.getInt("course_id"));
                        }
                    }
                }

                // Get course names for the obtained course IDs
                try (PreparedStatement courseNameStmt = con.prepareStatement(courseNameQuery)) {
                    for (int courseId : courseIds) {
                        courseNameStmt.setInt(1, courseId);
                        try (ResultSet courseNameRs = courseNameStmt.executeQuery()) {
                            if (courseNameRs.next()) {
                                courseNames.add(courseNameRs.getString("course_name"));
                            }
                        }
                    }
                }

            } else if (user_role.equals("Admin")) {
                // Get all course names
                String allCoursesQuery = "SELECT course_name FROM course";
                try (PreparedStatement allCoursesStmt = con.prepareStatement(allCoursesQuery);
                        ResultSet allCoursesRs = allCoursesStmt.executeQuery()) {
                    while (allCoursesRs.next()) {
                        courseNames.add(allCoursesRs.getString("course_name"));
                    }
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Clean up resources
            try {
                if (rs != null) {
                    rs.close();
                }
                if (stmt != null) {
                    stmt.close();
                }
                if (con != null) {
                    con.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return courseNames;
    }
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        List<String> courseNames = getCourseNamesByTutorId(tutor_id);
        for (String courseName : courseNames) {
            courseCombo.addItem(courseName);
        }
    }//GEN-LAST:event_formComponentShown
    private List<Object[]> getAttendanceByCourseAndDate(String course, String date) {
        List<Object[]> attendanceData = new ArrayList<>();

        String attendanceQuery = "SELECT student_id, student_name, status FROM student_attendance WHERE course_name = ? AND date = ?";

        try (Connection connection = ProvideConnection.getConnection();
                PreparedStatement attendanceStmt = connection.prepareStatement(attendanceQuery)) {
            attendanceStmt.setString(1, course);
            attendanceStmt.setString(2, date);
            try (ResultSet attendanceRs = attendanceStmt.executeQuery()) {
                student_count = 0;
                present_count = 0;
                absent_count = 0;
                while (attendanceRs.next()) {
                    int studentId = attendanceRs.getInt("student_id");
                    String studentName = attendanceRs.getString("student_name");
                    String status = attendanceRs.getString("status");
                    attendanceData.add(new Object[]{studentId, studentName, status});
                    student_count++;
                    if ("Present".equalsIgnoreCase(status)) {
                        present_count++;
                    } else if ("Absent".equalsIgnoreCase(status)) {
                        absent_count++;
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return attendanceData;
    }

    private void updateStudentTable(List<Object[]> students) {
        DefaultTableModel tableModel = (DefaultTableModel) studentattendanceTbl.getModel();
        // Clear existing data
        tableModel.setRowCount(0);

        // Add new data
        for (Object[] student : students) {
            tableModel.addRow(student);
        }

        // Ensure the "Status" column has a combo box for each row with "Absent" and "Present" options
        TableColumn statusColumn = studentattendanceTbl.getColumnModel().getColumn(2);
        statusColumn.setCellEditor(new DefaultCellEditor(new JComboBox<>(new String[]{"Absent", "Present"})));

        studentattendanceTbl.getColumnModel().getColumn(2).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                JComboBox<String> comboBox = new JComboBox<>(new String[]{"Absent", "Present"});
                if (value != null) {
                    comboBox.setSelectedItem(value.toString());
                }
                return comboBox;
            }
        });
        totalstudentTxt.setText("" + student_count);
        presentstudentTxt.setText("" + present_count);
        absentstudentTxt.setText("" + absent_count);

    }
    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        // TODO add your handling code here:
        String selectedCourse = (String) courseCombo.getSelectedItem();
        Date selectedDateObj = dateChooser.getDate();
        if (selectedDateObj == null) {
            JOptionPane.showMessageDialog(null, "Please select appropriate date.");
            return;
        }

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String selectedDate = dateFormat.format(selectedDateObj);

        if (selectedCourse == null || selectedCourse.equals("None")) {
            JOptionPane.showMessageDialog(null, "Please select course.");
        } else {
            List<Object[]> attendanceData = getAttendanceByCourseAndDate(selectedCourse, selectedDate);
            updateStudentTable(attendanceData);
        }
    }//GEN-LAST:event_viewBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) studentattendanceTbl.getModel();
        int rowCount = tableModel.getRowCount();
        String updateQuery = "UPDATE student_attendance SET status = ? WHERE student_id = ? AND course_name = ? AND date = ?";

        String selectedCourse = (String) courseCombo.getSelectedItem();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String selectedDate = dateFormat.format(dateChooser.getDate());

        if (selectedDate == null || selectedDate.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select appropriate date.");
            return;
        } else if (selectedCourse == null || selectedCourse.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select course.");
            return;
        }

        try (Connection connection = ProvideConnection.getConnection();
                PreparedStatement updateStmt = connection.prepareStatement(updateQuery)) {

            for (int i = 0; i < rowCount; i++) {
                int studentId = (int) tableModel.getValueAt(i, 0);
                String status = (String) tableModel.getValueAt(i, 2);

                updateStmt.setString(1, status);
                updateStmt.setInt(2, studentId);
                updateStmt.setString(3, selectedCourse);
                updateStmt.setString(4, selectedDate);
                updateStmt.addBatch();
            }

            updateStmt.executeBatch();
            JOptionPane.showMessageDialog(null, "Attendance updated successfully!");

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error updating attendance.");
        }

        // Reload the table data
        List<Object[]> attendanceData = getAttendanceByCourseAndDate(selectedCourse, selectedDate);
        updateStudentTable(attendanceData);
    }//GEN-LAST:event_updateBtnActionPerformed

    private void cancelBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelBtnMouseClicked
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_cancelBtnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewAttendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField absentstudentTxt;
    private javax.swing.JLabel cancelBtn;
    private javax.swing.JComboBox<String> courseCombo;
    private javax.swing.JTextField coursenameTxt;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField presentstudentTxt;
    private javax.swing.JTable studentattendanceTbl;
    private javax.swing.JTextField totalstudentTxt;
    private javax.swing.JButton updateBtn;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables
}
