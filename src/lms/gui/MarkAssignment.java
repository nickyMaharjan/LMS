/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lms.gui;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import lms.connection.ProvideConnection;

/**
 *
 * @author DELL
 */
public class MarkAssignment extends javax.swing.JFrame {

    /**
     * Creates new form MarkAssignment
     */
    public int tutor_id;

    public MarkAssignment() {
        initComponents();
        setLocation(560, 60);
    }

    public MarkAssignment(int tutor_id) {
        initComponents();
        this.tutor_id = tutor_id;
        setLocation(560, 60);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        cancelBtn = new javax.swing.JLabel();
        coursenameCombo = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        assignmentidCombo = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        viewBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        assignmentTbl = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        statusTxt = new javax.swing.JTextField();
        updateBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 24)); // NOI18N
        jLabel1.setText("Mark Assignment");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(494, 13, -1, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 52, 1200, 10));

        cancelBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/images/cancel.png"))); // NOI18N
        cancelBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelBtnMouseClicked(evt);
            }
        });
        getContentPane().add(cancelBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1156, 13, -1, -1));

        coursenameCombo.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        coursenameCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        coursenameCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coursenameComboActionPerformed(evt);
            }
        });
        coursenameCombo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                coursenameComboPropertyChange(evt);
            }
        });
        getContentPane().add(coursenameCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(182, 92, 300, 35));

        jLabel7.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jLabel7.setText("Course Name");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 92, -1, 35));

        assignmentidCombo.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        assignmentidCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        getContentPane().add(assignmentidCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(662, 92, 300, 35));

        jLabel8.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jLabel8.setText("Assignment Id");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(524, 92, -1, 35));

        viewBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        viewBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/images/file.png"))); // NOI18N
        viewBtn.setText("View");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });
        getContentPane().add(viewBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1025, 90, -1, -1));

        assignmentTbl.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        assignmentTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Assignment Id", "Student Id", "Student Name", "Grade"
            }
        ));
        jScrollPane1.setViewportView(assignmentTbl);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 147, 1176, 683));

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 0, 20)); // NOI18N
        jLabel5.setText("Status");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(455, 856, -1, -1));

        statusTxt.setFont(new java.awt.Font("Segoe UI Semibold", 0, 20)); // NOI18N
        statusTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                statusTxtMouseClicked(evt);
            }
        });
        statusTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusTxtActionPerformed(evt);
            }
        });
        getContentPane().add(statusTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(545, 852, 300, 35));

        updateBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        updateBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/images/updating.png"))); // NOI18N
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        getContentPane().add(updateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1029, 848, -1, -1));

        jPanel1.setBackground(new java.awt.Color(249, 244, 241));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1200, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 900));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelBtnMouseClicked
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_cancelBtnMouseClicked
    private void updateStatusTxt() {
        DefaultTableModel model = (DefaultTableModel) assignmentTbl.getModel();

        // Check if the table is empty
        if (model.getRowCount() == 0) {
            statusTxt.setText(""); // Set to empty string if table is empty
            return;
        }

        boolean hasNone = false;

        // Iterate through the "Grade" column
        for (int row = 0; row < model.getRowCount(); row++) {
            String grade = (String) model.getValueAt(row, 3); // Assuming the "Grade" column is index 3
            if ("None".equals(grade)) {
                hasNone = true;
                break;
            }
        }

        // Set statusTxt based on presence of "None"
        if (hasNone) {
            statusTxt.setText("Pending");
        } else {
            statusTxt.setText("Checked");
        }
    }

    private void populateAssignmentTable() {
        String selectedAssignmentId = (String) assignmentidCombo.getSelectedItem();
        String selectedCourseName = (String) coursenameCombo.getSelectedItem();

        String studentQuery = "SELECT student_id, first_name FROM student WHERE course = ?";

        try (Connection con = ProvideConnection.getConnection();
                PreparedStatement studentStmt = con.prepareStatement(studentQuery)) {

            studentStmt.setString(1, selectedCourseName);
            ResultSet studentRs = studentStmt.executeQuery();

            // Prepare table model
            DefaultTableModel model = new DefaultTableModel(new Object[]{"Assignment Id", "Student Id", "Student Name", "Grade"}, 0);

            while (studentRs.next()) {
                Integer studentId = studentRs.getInt("student_id");
                String studentName = studentRs.getString("first_name");

                // Add row to table
                model.addRow(new Object[]{selectedAssignmentId, studentId, studentName, "None"});
            }

            // Set model to table
            assignmentTbl.setModel(model);
            updateStatusTxt();
            // Add combo box for "Grade" column
            TableColumn gradeColumn = assignmentTbl.getColumnModel().getColumn(3);
            JComboBox<String> gradeComboBox = new JComboBox<>(new String[]{"None", "A", "B", "C", "D", "E"});
            gradeColumn.setCellEditor(new DefaultCellEditor(gradeComboBox));

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        // TODO add your handling code here:
        populateAssignmentTable();

    }//GEN-LAST:event_viewBtnActionPerformed

    private void statusTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statusTxtActionPerformed

    private void statusTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_statusTxtMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_statusTxtMouseClicked

    public List<String> getCourseNamesByTutorId(int tutorId) {
        List<String> courseNames = new ArrayList<>();

        String courseIdQuery = "SELECT course_id FROM assign_tutor WHERE tutor_id = ?";
        String courseNameQuery = "SELECT course_name FROM course WHERE course_id = ?";

        try {
            // Retrieve course IDs
            Connection con = ProvideConnection.getConnection();
            List<Integer> courseIds = new ArrayList<>();
            try (PreparedStatement courseIdStmt = con.prepareStatement(courseIdQuery)) {
                courseIdStmt.setInt(1, tutorId);
                try (ResultSet courseIdRs = courseIdStmt.executeQuery()) {
                    while (courseIdRs.next()) {
                        courseIds.add(courseIdRs.getInt("course_id"));
                    }
                }
            }

            // Retrieve course names for the obtained course IDs
            try (PreparedStatement courseNameStmt = con.prepareStatement(courseNameQuery)) {
                for (int courseId : courseIds) {
                    courseNameStmt.setInt(1, courseId);
                    try (ResultSet courseNameRs = courseNameStmt.executeQuery()) {
                        if (courseNameRs.next()) {
                            courseNames.add(courseNameRs.getString("course_name"));
                        }
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return courseNames;
    }
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        List<String> courseNames = getCourseNamesByTutorId(tutor_id);
        for (String courseName : courseNames) {
            coursenameCombo.addItem(courseName);
        }
    }//GEN-LAST:event_formComponentShown

    private void updateAssignmentComboBox(String courseName) {

        String query = "SELECT assignment_id FROM assignment WHERE course_name = ?";

        try (Connection con = ProvideConnection.getConnection();
                PreparedStatement stmt = con.prepareStatement(query)) {

            stmt.setString(1, courseName);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    int assignmentId = rs.getInt("assignment_id");
                    assignmentidCombo.addItem("" + assignmentId);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private void coursenameComboPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_coursenameComboPropertyChange
        // TODO add your handling code here:

    }//GEN-LAST:event_coursenameComboPropertyChange

    private void coursenameComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coursenameComboActionPerformed
        // TODO add your handling code here:
        String selectedCourseName = (String) coursenameCombo.getSelectedItem();
        System.out.println(selectedCourseName);
        updateAssignmentComboBox(selectedCourseName);
    }//GEN-LAST:event_coursenameComboActionPerformed
    private void handleUpdate() {
        DefaultTableModel model = (DefaultTableModel) assignmentTbl.getModel();
        boolean allGraded = true;

        // Iterate through the "Grade" column
        for (int row = 0; row < model.getRowCount(); row++) {
            String grade = (String) model.getValueAt(row, 3); // Assuming the "Grade" column is index 3
            if ("None".equals(grade)) {
                allGraded = false;
                break;
            }
        }

        // Notify user if any grades are missing
        if (allGraded) {
            insertGradesIntoDatabase();
        } else {
            JOptionPane.showMessageDialog(null, "Please grade all assignments before updating.", "Incomplete Grades", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void insertGradesIntoDatabase() {
        String selectedAssignmentIdStr = (String) assignmentidCombo.getSelectedItem();
        if (selectedAssignmentIdStr == null || selectedAssignmentIdStr.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No assignment selected.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int selectedAssignmentId;
        try {
            selectedAssignmentId = Integer.parseInt(selectedAssignmentIdStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid assignment ID selected.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String insertQuery = "INSERT INTO grade (assignment_id, student_id, student_name, grade) VALUES (?, ?, ?, ?)";
        String updateQuery = "UPDATE assignment SET status = 'Checked' WHERE assignment_id = ?";

        try (Connection con = ProvideConnection.getConnection();
                PreparedStatement insertStmt = con.prepareStatement(insertQuery);
                PreparedStatement updateStmt = con.prepareStatement(updateQuery)) {

            DefaultTableModel model = (DefaultTableModel) assignmentTbl.getModel();

            for (int row = 0; row < model.getRowCount(); row++) {
                Object assignmentIdObj = model.getValueAt(row, 0);
                Object studentIdObj = model.getValueAt(row, 1);
                Object studentNameObj = model.getValueAt(row, 2);
                Object gradeObj = model.getValueAt(row, 3);

                // Debugging: Print the types of the retrieved values
                System.out.println("Assignment ID: " + assignmentIdObj + " (Type: " + assignmentIdObj.getClass().getName() + ")");
                System.out.println("Student ID: " + studentIdObj + " (Type: " + studentIdObj.getClass().getName() + ")");
                System.out.println("Student Name: " + studentNameObj + " (Type: " + studentNameObj.getClass().getName() + ")");
                System.out.println("Grade: " + gradeObj + " (Type: " + gradeObj.getClass().getName() + ")");

                if (assignmentIdObj instanceof String && studentIdObj instanceof Integer
                        && studentNameObj instanceof String && gradeObj instanceof String) {

                    String assignmentIdStr = (String) assignmentIdObj;
                    int assignmentId = Integer.parseInt(assignmentIdStr);
                    int studentId = (Integer) studentIdObj;
                    String studentName = (String) studentNameObj;
                    String grade = (String) gradeObj;

                    // Insert into grade table
                    insertStmt.setInt(1, assignmentId);
                    insertStmt.setInt(2, studentId);
                    insertStmt.setString(3, studentName);
                    insertStmt.setString(4, grade);
                    insertStmt.addBatch();
                } else {
                    // Handle the case where data is not as expected
                    JOptionPane.showMessageDialog(null, "Unexpected data type in table.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            // Execute batch insert
            insertStmt.executeBatch();

            // Update status in the assignment table for the selected assignment ID
            updateStmt.setInt(1, selectedAssignmentId);
            updateStmt.executeUpdate();

            JOptionPane.showMessageDialog(null, "Grades and assignment status updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        handleUpdate();
    }//GEN-LAST:event_updateBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MarkAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MarkAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MarkAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MarkAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MarkAssignment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable assignmentTbl;
    private javax.swing.JComboBox<String> assignmentidCombo;
    private javax.swing.JLabel cancelBtn;
    private javax.swing.JComboBox<String> coursenameCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField statusTxt;
    private javax.swing.JButton updateBtn;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables
}
