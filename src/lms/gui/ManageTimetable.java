/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lms.gui;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import lms.connection.ProvideConnection;

/**
 *
 * @author DELL
 */
public class ManageTimetable extends javax.swing.JFrame {

    /**
     * Creates new form ManageTimetable
     */
    private boolean updatingCourseIdCombo = false;
    private boolean updatingCourseNameCombo = false;
    private boolean updatingTutorIdCombo = false;
    private boolean updatingTutorNameCombo = false;

    public ManageTimetable() {
        initComponents();
        setLocation(560, 60);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        timetableLbl = new javax.swing.JLabel();
        timetableidTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        courseidCombo = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        coursenameCombo = new javax.swing.JComboBox<>();
        startatLbl = new javax.swing.JLabel();
        startatTxt = new javax.swing.JTextField();
        endatLbl = new javax.swing.JLabel();
        endatTxt = new javax.swing.JTextField();
        roomLbl = new javax.swing.JLabel();
        roomCombo = new javax.swing.JComboBox<>();
        roomLbl1 = new javax.swing.JLabel();
        sundayCheckbox = new javax.swing.JCheckBox();
        mondayCheckbox = new javax.swing.JCheckBox();
        tuesdayCheckbox = new javax.swing.JCheckBox();
        wednesdayCheckbox = new javax.swing.JCheckBox();
        thursdayCheckbox = new javax.swing.JCheckBox();
        fridayCheckbox = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        addBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        timetableTbl = new javax.swing.JTable();
        startamRadio = new javax.swing.JRadioButton();
        startpmRadio = new javax.swing.JRadioButton();
        endpmRadio = new javax.swing.JRadioButton();
        endamRadio = new javax.swing.JRadioButton();
        cancelBtn = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        jLabel1.setText("Time table");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(511, 13, -1, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 52, 1200, 10));

        timetableLbl.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        timetableLbl.setText("Time table ID");
        getContentPane().add(timetableLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 80, 100, 35));

        timetableidTxt.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        timetableidTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timetableidTxtActionPerformed(evt);
            }
        });
        getContentPane().add(timetableidTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 80, 300, 35));

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jLabel5.setText("Course Id");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 142, 100, 35));

        courseidCombo.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        courseidCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        courseidCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                courseidComboItemStateChanged(evt);
            }
        });
        courseidCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseidComboActionPerformed(evt);
            }
        });
        getContentPane().add(courseidCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 142, 300, 35));

        jLabel6.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        jLabel6.setText("Course Name");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 208, 100, 35));

        coursenameCombo.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        coursenameCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        coursenameCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                coursenameComboItemStateChanged(evt);
            }
        });
        coursenameCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coursenameComboActionPerformed(evt);
            }
        });
        getContentPane().add(coursenameCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 208, 300, 35));

        startatLbl.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        startatLbl.setText("Start At");
        getContentPane().add(startatLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 270, 100, 35));

        startatTxt.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        startatTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startatTxtActionPerformed(evt);
            }
        });
        getContentPane().add(startatTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 270, 200, 35));

        endatLbl.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        endatLbl.setText("End At");
        getContentPane().add(endatLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 334, 100, 35));

        endatTxt.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        endatTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endatTxtActionPerformed(evt);
            }
        });
        getContentPane().add(endatTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 334, 200, 35));

        roomLbl.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        roomLbl.setText("Days");
        getContentPane().add(roomLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 141, 100, 35));

        roomCombo.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        roomCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Room 1", "Room 2", "Room 3", "Room 4" }));
        roomCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                roomComboItemStateChanged(evt);
            }
        });
        roomCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomComboActionPerformed(evt);
            }
        });
        getContentPane().add(roomCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(605, 80, 300, 35));

        roomLbl1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        roomLbl1.setText("Room ");
        getContentPane().add(roomLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 80, 100, 35));

        sundayCheckbox.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        sundayCheckbox.setText("Sunday");
        sundayCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sundayCheckboxActionPerformed(evt);
            }
        });
        getContentPane().add(sundayCheckbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(605, 143, -1, -1));

        mondayCheckbox.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        mondayCheckbox.setText("Monday");
        getContentPane().add(mondayCheckbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(605, 194, -1, -1));

        tuesdayCheckbox.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        tuesdayCheckbox.setText("Tuesday");
        getContentPane().add(tuesdayCheckbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(605, 243, -1, -1));

        wednesdayCheckbox.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        wednesdayCheckbox.setText("Wednesday");
        getContentPane().add(wednesdayCheckbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 143, -1, -1));

        thursdayCheckbox.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        thursdayCheckbox.setText("Thursday");
        getContentPane().add(thursdayCheckbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 194, -1, -1));

        fridayCheckbox.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        fridayCheckbox.setText("Friday");
        getContentPane().add(fridayCheckbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 243, -1, -1));

        jPanel2.setBackground(new java.awt.Color(56, 69, 173));

        addBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        addBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/images/add.png"))); // NOI18N
        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        updateBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        updateBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/images/updating.png"))); // NOI18N
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        deleteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/images/delete.png"))); // NOI18N
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        resetBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        resetBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/images/reset.png"))); // NOI18N
        resetBtn.setText("Reset");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(resetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(resetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(943, 80, -1, -1));

        timetableTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Time Table Id", "Course Id", "Course Name", "Start At", "End At", "Room", "Days"
            }
        ));
        timetableTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timetableTblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(timetableTbl);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 456, 1154, -1));

        startamRadio.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        startamRadio.setText("AM");
        getContentPane().add(startamRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(342, 272, -1, -1));

        startpmRadio.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        startpmRadio.setText("PM");
        startpmRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startpmRadioActionPerformed(evt);
            }
        });
        getContentPane().add(startpmRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 272, -1, -1));

        endpmRadio.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        endpmRadio.setText("PM");
        endpmRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endpmRadioActionPerformed(evt);
            }
        });
        getContentPane().add(endpmRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 334, -1, -1));

        endamRadio.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        endamRadio.setText("AM");
        getContentPane().add(endamRadio, new org.netbeans.lib.awtextra.AbsoluteConstraints(342, 334, -1, -1));

        cancelBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lms/images/cancel.png"))); // NOI18N
        cancelBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelBtnMouseClicked(evt);
            }
        });
        getContentPane().add(cancelBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1156, 13, -1, -1));

        jPanel1.setBackground(new java.awt.Color(249, 244, 241));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1200, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1200, 900));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void timetableidTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timetableidTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timetableidTxtActionPerformed

    private void courseidComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_courseidComboItemStateChanged
        // TODO add your handling code here:
        if (updatingCourseIdCombo) {
            return; // Skip event handling if already updating
        }

        String selected_courseid = (String) courseidCombo.getSelectedItem();
        if ("None".equals(selected_courseid)) {
            JOptionPane.showMessageDialog(null, "You must choose a valid Course ID");
        } else {
            try {
                int int_courseid = Integer.parseInt(selected_courseid);
                String selected_coursename = null;
                Connection con = ProvideConnection.getConnection();
                String course_query = "SELECT course_name FROM course WHERE course_id = ?";
                PreparedStatement coursestmt = con.prepareStatement(course_query);
                coursestmt.setInt(1, int_courseid);
                ResultSet resultSet1 = coursestmt.executeQuery();
                if (resultSet1.next()) {
                    selected_coursename = resultSet1.getString("course_name");
                }
                resultSet1.close();
                coursestmt.close();
                con.close();

                // Update coursenameCombo without triggering the event
                updatingCourseNameCombo = true;
                coursenameCombo.setSelectedItem(selected_coursename);
                updatingCourseNameCombo = false;
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }//GEN-LAST:event_courseidComboItemStateChanged

    private void courseidComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseidComboActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_courseidComboActionPerformed

    private void coursenameComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_coursenameComboItemStateChanged
        // TODO add your handling code here:
        if (updatingCourseNameCombo) {
            return; // Skip event handling if already updating
        }

        String selected_coursename = (String) coursenameCombo.getSelectedItem();
        if ("None".equals(selected_coursename)) {
            JOptionPane.showMessageDialog(null, "You must choose a valid Course Name");
        } else {
            try {
                String selected_courseid = null;
                Connection con = ProvideConnection.getConnection();
                String course_query = "SELECT course_id FROM course WHERE course_name = ?";
                PreparedStatement coursestmt = con.prepareStatement(course_query);
                coursestmt.setString(1, selected_coursename);
                ResultSet resultSet1 = coursestmt.executeQuery();
                if (resultSet1.next()) {
                    selected_courseid = String.valueOf(resultSet1.getInt("course_id"));
                }
                resultSet1.close();
                coursestmt.close();
                con.close();

                // Update courseidCombo without triggering the event
                updatingCourseIdCombo = true;
                courseidCombo.setSelectedItem(selected_courseid);
                updatingCourseIdCombo = false;
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }//GEN-LAST:event_coursenameComboItemStateChanged

    private void coursenameComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coursenameComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coursenameComboActionPerformed

    private void startatTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startatTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startatTxtActionPerformed

    private void endatTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endatTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_endatTxtActionPerformed

    private void roomComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_roomComboItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_roomComboItemStateChanged

    private void roomComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_roomComboActionPerformed

    private void sundayCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sundayCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sundayCheckboxActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:
// Retrieve values from fields
        String timetableId = timetableidTxt.getText().trim();
        String selectedCourseId = (String) courseidCombo.getSelectedItem();
        String selectedCourseName = (String) coursenameCombo.getSelectedItem();
        String startAt = startatTxt.getText().trim();
        if(startamRadio.isSelected()){
            startAt+="AM";
        }
        if(startpmRadio.isSelected()){
            startAt+="PM";
        }
        String endAt = endatTxt.getText().trim();
        if(endamRadio.isSelected()){
            endAt+="AM";
        }
        if(endpmRadio.isSelected()){
            endAt+="PM";
        }
        String room = (String) roomCombo.getSelectedItem();
        StringBuilder selectedDays = new StringBuilder();

        if (sundayCheckbox.isSelected()) {
            selectedDays.append("Sunday ");
        }
        if (mondayCheckbox.isSelected()) {
            selectedDays.append("Monday ");
        }
        if (tuesdayCheckbox.isSelected()) {
            selectedDays.append("Tuesday ");
        }
        if (wednesdayCheckbox.isSelected()) {
            selectedDays.append("Wednesday ");
        }
        if (thursdayCheckbox.isSelected()) {
            selectedDays.append("Thursday ");
        }
        if (fridayCheckbox.isSelected()) {
            selectedDays.append("Friday ");
        }

// Validate inputs
        if (timetableId.isEmpty()) {
            JOptionPane.showMessageDialog(null, "You must enter a valid Time Table ID");
            return;
        }
        if (selectedCourseId.equals("None")) {
            JOptionPane.showMessageDialog(null, "You must choose a valid Course ID");
            return;
        }
        if (selectedCourseName.equals("None")) {
            JOptionPane.showMessageDialog(null, "You must choose a valid Course Name");
            return;
        }
        if (startAt.isEmpty()) {
            JOptionPane.showMessageDialog(null, "You must enter a valid Starting time.");
            return;
        }
        if (endAt.isEmpty()) {
            JOptionPane.showMessageDialog(null, "You must enter valid Ending times");
            return;
        }
        if (room.equals("")) {
            JOptionPane.showMessageDialog(null, "You must select a valid Room number.");
            return;
        }
        if (selectedDays.toString().isEmpty()) {
            JOptionPane.showMessageDialog(null, "You must select at least one day");
            return;
        }

// Insert new timetable record
        try {
            Connection con = ProvideConnection.getConnection();
            // Proceed with insertion
            String insertQuery = "INSERT INTO timetable (timetable_id, course_id, course_name, start_at, end_at, room, days) VALUES (?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement insertStmt = con.prepareStatement(insertQuery);
            insertStmt.setInt(1, Integer.parseInt(timetableId));
            insertStmt.setInt(2, Integer.parseInt(selectedCourseId));
            insertStmt.setString(3, selectedCourseName);
            insertStmt.setString(4, startAt);
            insertStmt.setString(5, endAt);
            insertStmt.setString(6, room);
            insertStmt.setString(7, selectedDays.toString().trim());

            int rowsAffected = insertStmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Time Table Added Successfully.");
                setVisible(false);
                new ManageTimetable().setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "Failed to add Time Table.");
            }

            insertStmt.close();
            con.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "SQL Error: " + ex.getMessage());
            ex.printStackTrace(); // Print stack trace for debugging
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Number Format Error: " + ex.getMessage());
            ex.printStackTrace(); // Print stack trace for debugging
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        //        // TODO add your handling code here:
        String timetableid = timetableidTxt.getText();
        String selected_courseid = (String) courseidCombo.getSelectedItem();
        String selected_coursename = (String) coursenameCombo.getSelectedItem();
        String startat = startatTxt.getText();
        String endat = endatTxt.getText();
        String room = (String) roomCombo.getSelectedItem();
        String selectedDays = "";
        if (sundayCheckbox.isSelected()) {
            selectedDays += "Sunday ";
        }
        if (mondayCheckbox.isSelected()) {
            selectedDays += "Monday ";
        }
        if (tuesdayCheckbox.isSelected()) {
            selectedDays += "Tuesday ";
        }
        if (wednesdayCheckbox.isSelected()) {
            selectedDays += "Wednesday ";
        }
        if (thursdayCheckbox.isSelected()) {
            selectedDays += "Thursday ";
        }
        if (fridayCheckbox.isSelected()) {
            selectedDays += "Friday ";
        }

        if (timetableid.equals("")) {
            JOptionPane.showMessageDialog(null, "You must enter a valid Time Table ID");
        } else if (selected_courseid.equals("None")) {
            JOptionPane.showMessageDialog(null, "You must choose a valid Course ID");
        } else if (selected_coursename.equals("None")) {
            JOptionPane.showMessageDialog(null, "You must choose a valid Course Name");
        } else if (startat.equals("")) {
            JOptionPane.showMessageDialog(null, "You must enter a valid Starting time.");
        } else if (endat.equals("")) {
            JOptionPane.showMessageDialog(null, "You must enter valid Ending times");
        } else if (room.equals("")) {
            JOptionPane.showMessageDialog(null, "You must select a valid Room number.");
        } else if (selectedDays.equals("")) {
            JOptionPane.showMessageDialog(null, "You must select at least one day");
        } else {
            try {
                Connection con = ProvideConnection.getConnection();
                String update_query = "UPDATE timetable SET course_id=?, course_name=?, start_at=?, end_at=?, room=?, days=? WHERE timetable_id=?";
                PreparedStatement updateStmt = con.prepareStatement(update_query);
                updateStmt.setInt(1, Integer.parseInt(selected_courseid));
                updateStmt.setString(2, selected_coursename);
                updateStmt.setString(3, startat);
                updateStmt.setString(4, endat);
                updateStmt.setString(5, room);
                updateStmt.setString(6, selectedDays.trim());
                updateStmt.setInt(7, Integer.parseInt(timetableid));
                updateStmt.executeUpdate();
                JOptionPane.showMessageDialog(null, "Time Table Updated Successfully.");
                setVisible(false);
                new ManageTimetable().setVisible(true);
                updateStmt.close();
                con.close();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error updating Time Table");
            }
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        String timetableid = timetableidTxt.getText();

        if (timetableid.equals("")) {
            JOptionPane.showMessageDialog(null, "You must enter a valid Time Table ID");
        } else {
            try {
                Connection con = ProvideConnection.getConnection();
                String delete_query = "DELETE FROM timetable WHERE timetable_id = ?";
                PreparedStatement deleteStmt = con.prepareStatement(delete_query);
                deleteStmt.setInt(1, Integer.parseInt(timetableid));
                int rowsAffected = deleteStmt.executeUpdate();

                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(null, "Time Table Deleted Successfully.");

                    // Remove the selected row from the table model
                    DefaultTableModel model = (DefaultTableModel) timetableTbl.getModel();
                    int selectedRow = timetableTbl.getSelectedRow();
                    if (selectedRow != -1) {
                        model.removeRow(selectedRow);
                    }

                    // Clear the form fields
                    updatingCourseIdCombo = true;
                    updatingCourseNameCombo = true;

                    timetableidTxt.setText("");
                    courseidCombo.setSelectedItem("None");
                    coursenameCombo.setSelectedItem("None");
                    startatTxt.setText("");
                    endatTxt.setText("");
                    roomCombo.setSelectedItem("None");
                    sundayCheckbox.setSelected(false);
                    mondayCheckbox.setSelected(false);
                    tuesdayCheckbox.setSelected(false);
                    wednesdayCheckbox.setSelected(false);
                    thursdayCheckbox.setSelected(false);
                    fridayCheckbox.setSelected(false);

                    updatingCourseIdCombo = false;
                    updatingCourseNameCombo = false;
                } else {
                    JOptionPane.showMessageDialog(null, "No Time Table found with the given ID.");
                }

                deleteStmt.close();
                con.close();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error deleting Time Table");
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        // TODO add your handling code here:
        updatingCourseIdCombo = true;
        updatingCourseNameCombo = true;

        try {
            // Clear all fields
            timetableidTxt.setText("");
            timetableidTxt.setEditable(true);
            courseidCombo.setSelectedItem("None");
            coursenameCombo.setSelectedItem("None");
            startatTxt.setText("");
            endatTxt.setText("");
            roomCombo.setSelectedItem("None");

            sundayCheckbox.setSelected(false);
            mondayCheckbox.setSelected(false);
            tuesdayCheckbox.setSelected(false);
            wednesdayCheckbox.setSelected(false);
            thursdayCheckbox.setSelected(false);
            fridayCheckbox.setSelected(false);
        } finally {
            // Reset flags to false
            updatingCourseIdCombo = false;
            updatingCourseNameCombo = false;
        }

    }//GEN-LAST:event_resetBtnActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        ButtonGroup start_bg=new ButtonGroup();
        start_bg.add(startamRadio);
        start_bg.add(startpmRadio);
        ButtonGroup end_bg=new ButtonGroup();
        end_bg.add(endamRadio);
        end_bg.add(endpmRadio);
        try {
            Connection con = ProvideConnection.getConnection();
            String course_query = "SELECT course_id, course_name FROM course";

            Statement coursestmt = con.createStatement();

            ResultSet resultSet1 = coursestmt.executeQuery(course_query);

            while (resultSet1.next()) {
                courseidCombo.addItem("" + resultSet1.getInt("course_id"));
                coursenameCombo.addItem(resultSet1.getString("course_name"));
            }
            String assign_table = "SELECT * FROM timetable";
            DefaultTableModel model = (DefaultTableModel) timetableTbl.getModel();
            Statement assign_tablequery = con.createStatement();
            ResultSet resultSet3 = coursestmt.executeQuery(assign_table);
            while (resultSet3.next()) {
                model.addRow(new Object[]{resultSet3.getInt("timetable_id"), resultSet3.getInt("course_id"), resultSet3.getString("course_name"), resultSet3.getString("start_at"), resultSet3.getString("end_at"), resultSet3.getString("room"), resultSet3.getString("days")});

            }

            con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_formComponentShown

    private void timetableTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timetableTblMouseClicked
        // TODO add your handling code here:
        int selectedRow = timetableTbl.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) timetableTbl.getModel();
        timetableidTxt.setText(model.getValueAt(selectedRow, 0).toString());
        timetableidTxt.setEditable(false);
        courseidCombo.setSelectedItem(model.getValueAt(selectedRow, 1).toString());
        coursenameCombo.setSelectedItem(model.getValueAt(selectedRow, 2).toString());
        startatTxt.setText(model.getValueAt(selectedRow, 3).toString());
        endatTxt.setText(model.getValueAt(selectedRow, 4).toString());
        roomCombo.setSelectedItem(model.getValueAt(selectedRow, 5).toString());
        String days = model.getValueAt(selectedRow, 6).toString();
        sundayCheckbox.setSelected(days.contains("Sunday"));
        mondayCheckbox.setSelected(days.contains("Monday"));
        tuesdayCheckbox.setSelected(days.contains("Tuesday"));
        wednesdayCheckbox.setSelected(days.contains("Wednesday"));
        thursdayCheckbox.setSelected(days.contains("Thursday"));
        fridayCheckbox.setSelected(days.contains("Friday"));
    }//GEN-LAST:event_timetableTblMouseClicked

    private void startpmRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startpmRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startpmRadioActionPerformed

    private void endpmRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endpmRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_endpmRadioActionPerformed

    private void cancelBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelBtnMouseClicked
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_cancelBtnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageTimetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageTimetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageTimetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageTimetable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageTimetable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JLabel cancelBtn;
    private javax.swing.JComboBox<String> courseidCombo;
    private javax.swing.JComboBox<String> coursenameCombo;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JRadioButton endamRadio;
    private javax.swing.JLabel endatLbl;
    private javax.swing.JTextField endatTxt;
    private javax.swing.JRadioButton endpmRadio;
    private javax.swing.JCheckBox fridayCheckbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JCheckBox mondayCheckbox;
    private javax.swing.JButton resetBtn;
    private javax.swing.JComboBox<String> roomCombo;
    private javax.swing.JLabel roomLbl;
    private javax.swing.JLabel roomLbl1;
    private javax.swing.JRadioButton startamRadio;
    private javax.swing.JLabel startatLbl;
    private javax.swing.JTextField startatTxt;
    private javax.swing.JRadioButton startpmRadio;
    private javax.swing.JCheckBox sundayCheckbox;
    private javax.swing.JCheckBox thursdayCheckbox;
    private javax.swing.JLabel timetableLbl;
    private javax.swing.JTable timetableTbl;
    private javax.swing.JTextField timetableidTxt;
    private javax.swing.JCheckBox tuesdayCheckbox;
    private javax.swing.JButton updateBtn;
    private javax.swing.JCheckBox wednesdayCheckbox;
    // End of variables declaration//GEN-END:variables
}
